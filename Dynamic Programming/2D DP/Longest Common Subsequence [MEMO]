<---------------Memoization ------------>
# need a 2D memo that has rows as m and cols as n, 
# memo[m][n] --> gives the length of longest common subsequence for strings of lenght m and n

def lcs(str1,str2):
  m,n = len(str1), len(str2)
  memo = [[-1]*(n+1) for _ in range(m+1)]
  def dp(m,n):
    if memo[m][n] != -1:
      # already computed and thus no more holds default value
      return memo[m][n]
    if m == 0 or n == 0:
      mwmo[0][0] = 0
      return memo[0][0]
    if str[m-1] == str[n-1]:    # compare last char from both, if matches, move ahead
      memo[m][n] = 1 + dp(m-1,n-1)
    else:              # if it foesnt match, try taking str1 char and leave str2 or take str2 char and leave str1 by using max function
      memo[m][n] = max(dp(m-1,n), dp(m,n-1))
  return memo[m][n]
