<---------------Recursion ----------------->
# idea is to match the last element and build up from there
def lcs(str1, str2,m,n):
  if m==0 or n ==0: return 0    #base case
  if str1[m-1] == str2[n-1]:    # last index same
      retrun 1 + lcs(str1,str2, m-1, n-1)
  else:
    return max(lcs(str1, str2, m-1, n), lcs(str1, str2, m, n-1)
            # take once char from str1 OR take char from str2

<---------------Memoization ------------>
# need a 2D memo that has rows as m and cols as n, 
# memo[m][n] --> gives the length of longest common subsequence for strings of lenght m and n

def lcs(str1,str2):
  m,n = len(str1), len(str2)
  memo = [[-1]*(n+1) for _ in range(m+1)]
  def dp(m,n):
    if memo[m][n] != -1:
      # already computed and thus no more holds default value
      return memo[m][n]
    if m == 0 or n == 0:
      mwmo[0][0] = 0
      return memo[0][0]
    if str[m-1] == str[n-1]:    # compare last char from both, if matches, move ahead
      memo[m][n] = 1 + dp(m-1,n-1)
    else:              # if it foesnt match, try taking str1 char and leave str2 or take str2 char and leave str1 by using max function
      memo[m][n] = max(dp(m-1,n), dp(m,n-1))
  return memo[m][n]
  
  


<--------------------Tabulation ----------------->
def lcs(str1, str2);
    m,n = len(str1), len(str1)
    
    dp[][] = [[0]*(n+1) for _ in range(m+1)]     # n columns, m rows
    # rows represent str1 len ( 0 to m)
    # cols represent str2 len (0 to n)
    
    # base case dp[0][1] = dp[1][0] = 0     comparing with an empty string
    for i in range(1, m+1):
        for j in range(1, n+1):
    # both nested for loops start from index 1, skipping 0 indices base case
            if str1[i-1] == str2[j-1]:
                dp[i][j] = 1 + dp[i-1][j-1]  
                # the characters match, thus it contributes to the maxlength
            else:
                dp[i][j] = max(dp[i-1][j], dp[i][j-1])
                # we either skip a character from str1 or from str2
                # we get the max length possible from each action
    return dp[m][n]
