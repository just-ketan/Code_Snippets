<------------------Recursion -------->
def climb(n):
  if n == 0: return 0
  if n == 1: return 1
  if n == 2: return 2
  return climb(n-1) + climb(n-2)


< ---------------Memoization ------------->
memo = {0:0,1:1,2:2}
def climb(n):
  if n in memo:
    return memo[n]  
  memo[n] = climb(n-2) + climb(n-1)
  return memo[n]


<-------------- Tabulation -------------->
def climbing(self, n:int) -> int:
    
    if n <= 3:
        # if stairs is < 3, there are n ways
        # 1 -> 1 -> 1 == 3
        # 1 -> 2 == 3
        # 2 -> 1 == 3

    dp = [0] * (n+1)
    dp[0] = 0   # represents base case of being at position 0
    dp[1] = 1   # can climb one stair to reach dp[1]
    dp[2] = 2   # can climb 2 stairs to rach dp[2]
    for i in range(3, n+1):
        dp[i] = dp[i-1] + dp[i-2]
    return dp[i]
    # this takes O(n) space for dp buildup
    
    # space optimised for O(1)
    
    if n <= 3:
        return n
    
    a = 1 
    b = 2
    for _ in range(3, n+1):
        a, b = b, a+b 
    return b
    
    # we basically have 2 pointers, a and b that move forward and b is always 1 jump ahead.
    # no of jumps b can do would be all the  jumps it could do earlier ( given by position a) + number of jumps he can do with 2 choice
